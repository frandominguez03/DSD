/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _CALCULADORA_H_RPCGEN
#define _CALCULADORA_H_RPCGEN

#include <rpc/rpc.h>


#ifdef __cplusplus
extern "C" {
#endif


typedef struct {
	u_int t_vector_len;
	float *t_vector_val;
} t_vector;

struct suma_2_argument {
	t_vector a;
	t_vector b;
};
typedef struct suma_2_argument suma_2_argument;

struct resta_2_argument {
	t_vector a;
	t_vector b;
};
typedef struct resta_2_argument resta_2_argument;

struct multp_2_argument {
	t_vector a;
	t_vector b;
};
typedef struct multp_2_argument multp_2_argument;

struct prodv_2_argument {
	t_vector a;
	t_vector b;
};
typedef struct prodv_2_argument prodv_2_argument;

struct sumar_1_argument {
	int a;
	int b;
};
typedef struct sumar_1_argument sumar_1_argument;

struct restar_1_argument {
	int a;
	int b;
};
typedef struct restar_1_argument restar_1_argument;

struct multp_1_argument {
	int a;
	int b;
};
typedef struct multp_1_argument multp_1_argument;

struct divid_1_argument {
	int a;
	int b;
};
typedef struct divid_1_argument divid_1_argument;

struct power_1_argument {
	int a;
	int b;
};
typedef struct power_1_argument power_1_argument;

struct modulo_1_argument {
	int a;
	int b;
};
typedef struct modulo_1_argument modulo_1_argument;

#define CALCULADORA 0x20000001
#define CALCULADORA2 2

#if defined(__STDC__) || defined(__cplusplus)
#define SUMA 1
extern  t_vector * suma_2(t_vector , t_vector , CLIENT *);
extern  t_vector * suma_2_svc(t_vector , t_vector , struct svc_req *);
#define RESTA 2
extern  t_vector * resta_2(t_vector , t_vector , CLIENT *);
extern  t_vector * resta_2_svc(t_vector , t_vector , struct svc_req *);
#define MULTP 3
extern  t_vector * multp_2(t_vector , t_vector , CLIENT *);
extern  t_vector * multp_2_svc(t_vector , t_vector , struct svc_req *);
#define PRODV 4
extern  t_vector * prodv_2(t_vector , t_vector , CLIENT *);
extern  t_vector * prodv_2_svc(t_vector , t_vector , struct svc_req *);
extern int calculadora_2_freeresult (SVCXPRT *, xdrproc_t, caddr_t);

#else /* K&R C */
#define SUMA 1
extern  t_vector * suma_2();
extern  t_vector * suma_2_svc();
#define RESTA 2
extern  t_vector * resta_2();
extern  t_vector * resta_2_svc();
#define MULTP 3
extern  t_vector * multp_2();
extern  t_vector * multp_2_svc();
#define PRODV 4
extern  t_vector * prodv_2();
extern  t_vector * prodv_2_svc();
extern int calculadora_2_freeresult ();
#endif /* K&R C */
#define CALCULADORA1 1

#if defined(__STDC__) || defined(__cplusplus)
#define SUMAR 1
extern  int * sumar_1(int , int , CLIENT *);
extern  int * sumar_1_svc(int , int , struct svc_req *);
#define RESTAR 2
extern  int * restar_1(int , int , CLIENT *);
extern  int * restar_1_svc(int , int , struct svc_req *);
extern  int * multp_1(int , int , CLIENT *);
extern  int * multp_1_svc(int , int , struct svc_req *);
#define DIVID 4
extern  int * divid_1(int , int , CLIENT *);
extern  int * divid_1_svc(int , int , struct svc_req *);
#define POWER 5
extern  int * power_1(int , int , CLIENT *);
extern  int * power_1_svc(int , int , struct svc_req *);
#define MODULO 6
extern  int * modulo_1(int , int , CLIENT *);
extern  int * modulo_1_svc(int , int , struct svc_req *);
extern int calculadora_1_freeresult (SVCXPRT *, xdrproc_t, caddr_t);

#else /* K&R C */
#define SUMAR 1
extern  int * sumar_1();
extern  int * sumar_1_svc();
#define RESTAR 2
extern  int * restar_1();
extern  int * restar_1_svc();
extern  int * multp_1();
extern  int * multp_1_svc();
#define DIVID 4
extern  int * divid_1();
extern  int * divid_1_svc();
#define POWER 5
extern  int * power_1();
extern  int * power_1_svc();
#define MODULO 6
extern  int * modulo_1();
extern  int * modulo_1_svc();
extern int calculadora_1_freeresult ();
#endif /* K&R C */

/* the xdr functions */

#if defined(__STDC__) || defined(__cplusplus)
extern  bool_t xdr_t_vector (XDR *, t_vector*);
extern  bool_t xdr_suma_2_argument (XDR *, suma_2_argument*);
extern  bool_t xdr_resta_2_argument (XDR *, resta_2_argument*);
extern  bool_t xdr_multp_2_argument (XDR *, multp_2_argument*);
extern  bool_t xdr_prodv_2_argument (XDR *, prodv_2_argument*);
extern  bool_t xdr_sumar_1_argument (XDR *, sumar_1_argument*);
extern  bool_t xdr_restar_1_argument (XDR *, restar_1_argument*);
extern  bool_t xdr_multp_1_argument (XDR *, multp_1_argument*);
extern  bool_t xdr_divid_1_argument (XDR *, divid_1_argument*);
extern  bool_t xdr_power_1_argument (XDR *, power_1_argument*);
extern  bool_t xdr_modulo_1_argument (XDR *, modulo_1_argument*);

#else /* K&R C */
extern bool_t xdr_t_vector ();
extern bool_t xdr_suma_2_argument ();
extern bool_t xdr_resta_2_argument ();
extern bool_t xdr_multp_2_argument ();
extern bool_t xdr_prodv_2_argument ();
extern bool_t xdr_sumar_1_argument ();
extern bool_t xdr_restar_1_argument ();
extern bool_t xdr_multp_1_argument ();
extern bool_t xdr_divid_1_argument ();
extern bool_t xdr_power_1_argument ();
extern bool_t xdr_modulo_1_argument ();

#endif /* K&R C */

#ifdef __cplusplus
}
#endif

#endif /* !_CALCULADORA_H_RPCGEN */
